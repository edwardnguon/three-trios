Overview: This code implements a version of the Three Trios card game, a 2-player turn-based game
where players can place cards onto a grid of cells in order to battle with the opposing player's
cards and take them for themselves. The goal of the game is to come out with the most cards under
your control by the end of the game when all possible card cells are filled.

This codebase utilizes Java and object-oriented programming in order to create a program to
simulate the above game. We utilize the Java testing framework JUnit in order to create and
run tests to ensure our code works as intended.

Quick Start:
- Prepare Configuration Files: In order to have preset grids and cards to use for this game, you can
make configuration files that can be read my methods in our code to initialize each of them. We
have already made some example files for both grids and cards, which can be found in the Configs
folder...
ex Grid Configuration: {Rows Columns}{Row1}{Row2}{etc}
3 3
CCC
CCC
CCC
ex Card Configuration: {CardName North South East West}{etc}
CARD1 1 1 1 1
CARD2 2 2 2 2
CARD3 3 3 3 3
CARD4 4 4 4 4
CARD5 5 5 5 5
CARD6 6 6 6 6
CARD7 7 7 7 7
CARD8 8 8 8 8
CARD9 9 9 9 9
CARDA A A A A

- Initialize Game Components: We've made a ConfigReader class whose methods allow you to use the
file paths of these configuration files to start creating grids and cards ready for use with the
game's model. Examples of this being done can be found in the main method in ThreeTrios class...
// Makes a grid from the config's filepath
Grid grid1 = ConfigReader.readGrid("Configs/NoHolesGrid:9C0H");
// Makes a list of cards from the config filepath
List<Card> cards1 = ConfigReader.readCards("Configs/CardConfig:10");
// Makes a controller based on the above grid and cards
GameController controller1 = new GameController(grid1, cards1);
// Prints the visual representation of the game, further controller implementation to come
controller1.runGame();

- Start the Game: The controller for the gameplay loop has yet to have been implemented but you can
run the main method in ThreeTrios class to see the beginning of what the program can output.

Key Components:
Our codebase is split up into three main component folders: Model, Controller, and View. The Model
has the bulk of our code and represents the Three Trios card game's aspects and rules. The View is
responsible for reading and converting our model into a user friendly string representation. The
controller, although with limited implementation in this current codebase, is responsible for
calling on the Model's methods to manipulate it through the game's core loop, and then calling
on the view in order to render the method to the user.
- Both the View and the Controller for our codebase are relatively easy to understand. The majority
bulk of our code lies in the Model.
- The Model is composed of a model class that is the main connection between the model and the rest
of the code, supported by several classes that help facilitate the model's representation of the
game. These supporting classes are also driven by their own support classes. The grid class is what
drives the CardCell and hole classes in order to represent the game's grid. The Player class drives
the Color enum and the Card class to represent a player's color and their respective hand. And the
card class is what helps drives the CardinalDirection enum to the rest of the model. The
ThreeTriosGameModel class is what drives all of the supporting classes together into a single
class that is capable of representing the ThreeTrios game.

/Configs - Contains examples of configuration files used to setup the game
- CardConfig:10 - 10 cards
- CardConfig:20
- ConnectingGrid:9C16H - 9 card cells, 16 holes
- NoHolesGrid:9C0H
- NonConnectingGrid:17C18H
/src - Contains the relevant Controller, View, and Model classes of the game
- /controller - Responsible for driving the game model into action
    - GameController
- /model - The meat and potatoes of the game that represents the game's overall structure
    - Card - Class to represent each card of the game
    - Player - Represents a player in the game that has a respective color and hand of cards
    - Cell - Interface implemented by CardCell and Hole, representing each cell in a given grid
    - CardCell - Class to represent a cell in a grid where players play cards onto
    - Hole - A cell in a grid that players can not place cards onto
    - Grid - Class that consists of a 2d-array of cells to represent the game's board
    - ThreeTriosModel - Interface implemented by the model and has the relevant public methods
    - ThreeTriosGameModel - Class that drives the above classes together to represent the game
- /view - Responsible for translating the model into a string representation of the game
    - TextualView
- ThreeTrios - Class with the main method where you can see how the game runs
/test - Contains relevant test classes
- ControllerTest
- ModelTest
- ViewTest


Player Interface:
We can have the Player/AI interface define some methods that an AI could possible use in order
to start designing game where we can play a back and forth with another entity other than
ourselves or another person.
- The first essential thing an Player/AI should have would be a method to play a card to the grid.
Say it takes in some card index in hand to select a card in its hand, and then maybe two more
arguments to denote the row and column coordinates of the grid.
- But in order for this interface to play the game in an at least somewhat competitive fashion, we
need to implement some way for this entity to play a move that actually makes sense, rather than
just having it play a random card to any random card cell. This would require us to write some
sort of algorithm to find some move that would actually contribute towards the goal of the game, to
win the most cards. This will likely involve comparing the attack values of the cards in hand to the
values of the existing card on the grid.
- The above implies that there are levels of optimality to certain moves you can take. Which means
we should possibly consider implementing different difficulties of this Player/AI. This brings up
questions like What makes one move better than the other? Is there a move in between a bad and a
good one? These are answers that will have to be answered in future implementation.
- Also we can't forget turns. We can't have this interface taking up multiple card cells at once,
so we'll have to make sure to implement methods to prevent such behavior.
--------------------------------------------------------------------------------------------------
Changes for part 2

- Added a read-only interface for the model to be used with the view, ReadonlyThreeTriosModel
    - Transferred read-only methods from the old interface to the new
        - currentPlayer, checkGameOver, getHand, and announceWinner
    - Added new methods:
        - getGridSize, getGridRows, getGridCols: these methods just call on the existing methods
        in the grid class
        - cellContents: calls on a given cell in the grid and returns the card in the cell
        - cellOwner: goes a step beyond cellContents and returns the content's owner
        - legalMove: checks to see if the cell at given coordinates is already filled or not to
        determine if a new card can be placed there
        - cardFlips: creates a copy of the current game state to simulate the placing of the card
        at the given coordinates, and finds the differences between the cards before and after
        - playerScore: counts the number of cards owned by a given player and returns it

--------------------------------------------------------------------------------------------------
Changes for part 3
- Added Mock classes for Controller testing
    - MockView, MockPlayer, MockModel, MockController
    - Adjusted method codes so these mock classes return information in string messages, which is
      our testing equivalent to running a view. Does so primarily organized by a list of messages
      (strings) called "actions".

--------------------------------------------------------------------------------------------------
Part 4 - Adapting
- We were able to implement all features of the game.
- The panel that starts behind the first panel plays for RED, and goes first